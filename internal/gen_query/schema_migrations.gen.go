// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"jim_service/internal/gen_model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newSchemaMigrations(db *gorm.DB) schemaMigrations {
	_schemaMigrations := schemaMigrations{}

	_schemaMigrations.schemaMigrationsDo.UseDB(db)
	_schemaMigrations.schemaMigrationsDo.UseModel(&gen_model.SchemaMigrations{})

	tableName := _schemaMigrations.schemaMigrationsDo.TableName()
	_schemaMigrations.ALL = field.NewField(tableName, "*")
	_schemaMigrations.Version = field.NewInt64(tableName, "version")
	_schemaMigrations.Dirty = field.NewBool(tableName, "dirty")

	_schemaMigrations.fillFieldMap()

	return _schemaMigrations
}

type schemaMigrations struct {
	schemaMigrationsDo schemaMigrationsDo

	ALL     field.Field
	Version field.Int64
	Dirty   field.Bool

	fieldMap map[string]field.Expr
}

func (s schemaMigrations) As(alias string) *schemaMigrations {
	s.schemaMigrationsDo.DO = *(s.schemaMigrationsDo.As(alias).(*gen.DO))

	s.ALL = field.NewField(alias, "*")
	s.Version = field.NewInt64(alias, "version")
	s.Dirty = field.NewBool(alias, "dirty")

	s.fillFieldMap()

	return &s
}

func (s *schemaMigrations) WithContext(ctx context.Context) *schemaMigrationsDo {
	return s.schemaMigrationsDo.WithContext(ctx)
}

func (s schemaMigrations) TableName() string { return s.schemaMigrationsDo.TableName() }

func (s *schemaMigrations) GetFieldByName(fieldName string) (field.Expr, bool) {
	field, ok := s.fieldMap[fieldName]
	return field, ok
}

func (s *schemaMigrations) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["version"] = s.Version
	s.fieldMap["dirty"] = s.Dirty
}

func (s schemaMigrations) clone(db *gorm.DB) schemaMigrations {
	s.schemaMigrationsDo.ReplaceDB(db)
	return s
}

type schemaMigrationsDo struct{ gen.DO }

func (s schemaMigrationsDo) Debug() *schemaMigrationsDo {
	return s.withDO(s.DO.Debug())
}

func (s schemaMigrationsDo) WithContext(ctx context.Context) *schemaMigrationsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s schemaMigrationsDo) Clauses(conds ...clause.Expression) *schemaMigrationsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s schemaMigrationsDo) Not(conds ...gen.Condition) *schemaMigrationsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s schemaMigrationsDo) Or(conds ...gen.Condition) *schemaMigrationsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s schemaMigrationsDo) Select(conds ...field.Expr) *schemaMigrationsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s schemaMigrationsDo) Where(conds ...gen.Condition) *schemaMigrationsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s schemaMigrationsDo) Order(conds ...field.Expr) *schemaMigrationsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s schemaMigrationsDo) Distinct(cols ...field.Expr) *schemaMigrationsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s schemaMigrationsDo) Omit(cols ...field.Expr) *schemaMigrationsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s schemaMigrationsDo) Join(table schema.Tabler, on ...field.Expr) *schemaMigrationsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s schemaMigrationsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *schemaMigrationsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s schemaMigrationsDo) RightJoin(table schema.Tabler, on ...field.Expr) *schemaMigrationsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s schemaMigrationsDo) Group(cols ...field.Expr) *schemaMigrationsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s schemaMigrationsDo) Having(conds ...gen.Condition) *schemaMigrationsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s schemaMigrationsDo) Limit(limit int) *schemaMigrationsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s schemaMigrationsDo) Offset(offset int) *schemaMigrationsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s schemaMigrationsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *schemaMigrationsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s schemaMigrationsDo) Unscoped() *schemaMigrationsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s schemaMigrationsDo) Create(values ...*gen_model.SchemaMigrations) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s schemaMigrationsDo) CreateInBatches(values []*gen_model.SchemaMigrations, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s schemaMigrationsDo) Save(values ...*gen_model.SchemaMigrations) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s schemaMigrationsDo) First() (*gen_model.SchemaMigrations, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.SchemaMigrations), nil
	}
}

func (s schemaMigrationsDo) Take() (*gen_model.SchemaMigrations, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.SchemaMigrations), nil
	}
}

func (s schemaMigrationsDo) Last() (*gen_model.SchemaMigrations, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.SchemaMigrations), nil
	}
}

func (s schemaMigrationsDo) Find() ([]*gen_model.SchemaMigrations, error) {
	result, err := s.DO.Find()
	return result.([]*gen_model.SchemaMigrations), err
}

func (s schemaMigrationsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.SchemaMigrations, err error) {
	buf := make([]*gen_model.SchemaMigrations, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s schemaMigrationsDo) FindInBatches(result *[]*gen_model.SchemaMigrations, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s schemaMigrationsDo) Attrs(attrs ...field.AssignExpr) *schemaMigrationsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s schemaMigrationsDo) Assign(attrs ...field.AssignExpr) *schemaMigrationsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s schemaMigrationsDo) Joins(field field.RelationField) *schemaMigrationsDo {
	return s.withDO(s.DO.Joins(field))
}

func (s schemaMigrationsDo) Preload(field field.RelationField) *schemaMigrationsDo {
	return s.withDO(s.DO.Preload(field))
}

func (s schemaMigrationsDo) FirstOrInit() (*gen_model.SchemaMigrations, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.SchemaMigrations), nil
	}
}

func (s schemaMigrationsDo) FirstOrCreate() (*gen_model.SchemaMigrations, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.SchemaMigrations), nil
	}
}

func (s schemaMigrationsDo) FindByPage(offset int, limit int) (result []*gen_model.SchemaMigrations, count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	result, err = s.Offset(offset).Limit(limit).Find()
	return
}

func (s schemaMigrationsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s *schemaMigrationsDo) withDO(do gen.Dao) *schemaMigrationsDo {
	s.DO = *do.(*gen.DO)
	return s
}
