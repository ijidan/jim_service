// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"jim_service/internal/gen_model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newMessageIndex(db *gorm.DB) messageIndex {
	_messageIndex := messageIndex{}

	_messageIndex.messageIndexDo.UseDB(db)
	_messageIndex.messageIndexDo.UseModel(&gen_model.MessageIndex{})

	tableName := _messageIndex.messageIndexDo.TableName()
	_messageIndex.ALL = field.NewField(tableName, "*")
	_messageIndex.ID = field.NewUint64(tableName, "id")
	_messageIndex.SenderID = field.NewUint64(tableName, "sender_id")
	_messageIndex.ReceiverID = field.NewUint64(tableName, "receiver_id")
	_messageIndex.MessageContentID = field.NewInt64(tableName, "message_content_id")
	_messageIndex.GroupID = field.NewUint64(tableName, "group_id")
	_messageIndex.Status = field.NewInt32(tableName, "status")
	_messageIndex.CreatedAt = field.NewTime(tableName, "created_at")
	_messageIndex.UpdatedAt = field.NewTime(tableName, "updated_at")
	_messageIndex.DeletedAt = field.NewField(tableName, "deleted_at")
	_messageIndex.MessageContent = messageIndexHasOneMessageContent{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("MessageContent", "gen_model.MessageContent"),
	}

	_messageIndex.fillFieldMap()

	return _messageIndex
}

type messageIndex struct {
	messageIndexDo messageIndexDo

	ALL              field.Field
	ID               field.Uint64
	SenderID         field.Uint64
	ReceiverID       field.Uint64
	MessageContentID field.Int64
	GroupID          field.Uint64
	Status           field.Int32
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	MessageContent   messageIndexHasOneMessageContent

	fieldMap map[string]field.Expr
}

func (m messageIndex) As(alias string) *messageIndex {
	m.messageIndexDo.DO = *(m.messageIndexDo.As(alias).(*gen.DO))

	m.ALL = field.NewField(alias, "*")
	m.ID = field.NewUint64(alias, "id")
	m.SenderID = field.NewUint64(alias, "sender_id")
	m.ReceiverID = field.NewUint64(alias, "receiver_id")
	m.MessageContentID = field.NewInt64(alias, "message_content_id")
	m.GroupID = field.NewUint64(alias, "group_id")
	m.Status = field.NewInt32(alias, "status")
	m.CreatedAt = field.NewTime(alias, "created_at")
	m.UpdatedAt = field.NewTime(alias, "updated_at")
	m.DeletedAt = field.NewField(alias, "deleted_at")

	m.fillFieldMap()

	return &m
}

func (m *messageIndex) WithContext(ctx context.Context) *messageIndexDo {
	return m.messageIndexDo.WithContext(ctx)
}

func (m messageIndex) TableName() string { return m.messageIndexDo.TableName() }

func (m *messageIndex) GetFieldByName(fieldName string) (field.Expr, bool) {
	field, ok := m.fieldMap[fieldName]
	return field, ok
}

func (m *messageIndex) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["id"] = m.ID
	m.fieldMap["sender_id"] = m.SenderID
	m.fieldMap["receiver_id"] = m.ReceiverID
	m.fieldMap["message_content_id"] = m.MessageContentID
	m.fieldMap["group_id"] = m.GroupID
	m.fieldMap["status"] = m.Status
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt

}

func (m messageIndex) clone(db *gorm.DB) messageIndex {
	m.messageIndexDo.ReplaceDB(db)
	return m
}

type messageIndexHasOneMessageContent struct {
	db *gorm.DB

	field.RelationField
}

func (a messageIndexHasOneMessageContent) Where(conds ...field.Expr) *messageIndexHasOneMessageContent {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a messageIndexHasOneMessageContent) WithContext(ctx context.Context) *messageIndexHasOneMessageContent {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a messageIndexHasOneMessageContent) Model(m *gen_model.MessageIndex) *messageIndexHasOneMessageContentTx {
	return &messageIndexHasOneMessageContentTx{a.db.Model(m).Association(a.Name())}
}

type messageIndexHasOneMessageContentTx struct{ tx *gorm.Association }

func (a messageIndexHasOneMessageContentTx) Find() (result *gen_model.MessageContent, err error) {
	return result, a.tx.Find(&result)
}

func (a messageIndexHasOneMessageContentTx) Append(values ...*gen_model.MessageContent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a messageIndexHasOneMessageContentTx) Replace(values ...*gen_model.MessageContent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a messageIndexHasOneMessageContentTx) Delete(values ...*gen_model.MessageContent) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a messageIndexHasOneMessageContentTx) Clear() error {
	return a.tx.Clear()
}

func (a messageIndexHasOneMessageContentTx) Count() int64 {
	return a.tx.Count()
}

type messageIndexDo struct{ gen.DO }

func (m messageIndexDo) Debug() *messageIndexDo {
	return m.withDO(m.DO.Debug())
}

func (m messageIndexDo) WithContext(ctx context.Context) *messageIndexDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m messageIndexDo) Clauses(conds ...clause.Expression) *messageIndexDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m messageIndexDo) Not(conds ...gen.Condition) *messageIndexDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m messageIndexDo) Or(conds ...gen.Condition) *messageIndexDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m messageIndexDo) Select(conds ...field.Expr) *messageIndexDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m messageIndexDo) Where(conds ...gen.Condition) *messageIndexDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m messageIndexDo) Order(conds ...field.Expr) *messageIndexDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m messageIndexDo) Distinct(cols ...field.Expr) *messageIndexDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m messageIndexDo) Omit(cols ...field.Expr) *messageIndexDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m messageIndexDo) Join(table schema.Tabler, on ...field.Expr) *messageIndexDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m messageIndexDo) LeftJoin(table schema.Tabler, on ...field.Expr) *messageIndexDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m messageIndexDo) RightJoin(table schema.Tabler, on ...field.Expr) *messageIndexDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m messageIndexDo) Group(cols ...field.Expr) *messageIndexDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m messageIndexDo) Having(conds ...gen.Condition) *messageIndexDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m messageIndexDo) Limit(limit int) *messageIndexDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m messageIndexDo) Offset(offset int) *messageIndexDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m messageIndexDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *messageIndexDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m messageIndexDo) Unscoped() *messageIndexDo {
	return m.withDO(m.DO.Unscoped())
}

func (m messageIndexDo) Create(values ...*gen_model.MessageIndex) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m messageIndexDo) CreateInBatches(values []*gen_model.MessageIndex, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m messageIndexDo) Save(values ...*gen_model.MessageIndex) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m messageIndexDo) First() (*gen_model.MessageIndex, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MessageIndex), nil
	}
}

func (m messageIndexDo) Take() (*gen_model.MessageIndex, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MessageIndex), nil
	}
}

func (m messageIndexDo) Last() (*gen_model.MessageIndex, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MessageIndex), nil
	}
}

func (m messageIndexDo) Find() ([]*gen_model.MessageIndex, error) {
	result, err := m.DO.Find()
	return result.([]*gen_model.MessageIndex), err
}

func (m messageIndexDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.MessageIndex, err error) {
	buf := make([]*gen_model.MessageIndex, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m messageIndexDo) FindInBatches(result *[]*gen_model.MessageIndex, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m messageIndexDo) Attrs(attrs ...field.AssignExpr) *messageIndexDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m messageIndexDo) Assign(attrs ...field.AssignExpr) *messageIndexDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m messageIndexDo) Joins(field field.RelationField) *messageIndexDo {
	return m.withDO(m.DO.Joins(field))
}

func (m messageIndexDo) Preload(field field.RelationField) *messageIndexDo {
	return m.withDO(m.DO.Preload(field))
}

func (m messageIndexDo) FirstOrInit() (*gen_model.MessageIndex, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MessageIndex), nil
	}
}

func (m messageIndexDo) FirstOrCreate() (*gen_model.MessageIndex, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.MessageIndex), nil
	}
}

func (m messageIndexDo) FindByPage(offset int, limit int) (result []*gen_model.MessageIndex, count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	result, err = m.Offset(offset).Limit(limit).Find()
	return
}

func (m messageIndexDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m *messageIndexDo) withDO(do gen.Dao) *messageIndexDo {
	m.DO = *do.(*gen.DO)
	return m
}
