// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"jim_service/internal/gen_model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newGoadminRoleUsers(db *gorm.DB) goadminRoleUsers {
	_goadminRoleUsers := goadminRoleUsers{}

	_goadminRoleUsers.goadminRoleUsersDo.UseDB(db)
	_goadminRoleUsers.goadminRoleUsersDo.UseModel(&gen_model.GoadminRoleUsers{})

	tableName := _goadminRoleUsers.goadminRoleUsersDo.TableName()
	_goadminRoleUsers.ALL = field.NewField(tableName, "*")
	_goadminRoleUsers.RoleID = field.NewInt32(tableName, "role_id")
	_goadminRoleUsers.UserID = field.NewInt32(tableName, "user_id")
	_goadminRoleUsers.CreatedAt = field.NewTime(tableName, "created_at")
	_goadminRoleUsers.UpdatedAt = field.NewTime(tableName, "updated_at")

	_goadminRoleUsers.fillFieldMap()

	return _goadminRoleUsers
}

type goadminRoleUsers struct {
	goadminRoleUsersDo goadminRoleUsersDo

	ALL       field.Field
	RoleID    field.Int32
	UserID    field.Int32
	CreatedAt field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (g goadminRoleUsers) As(alias string) *goadminRoleUsers {
	g.goadminRoleUsersDo.DO = *(g.goadminRoleUsersDo.As(alias).(*gen.DO))

	g.ALL = field.NewField(alias, "*")
	g.RoleID = field.NewInt32(alias, "role_id")
	g.UserID = field.NewInt32(alias, "user_id")
	g.CreatedAt = field.NewTime(alias, "created_at")
	g.UpdatedAt = field.NewTime(alias, "updated_at")

	g.fillFieldMap()

	return &g
}

func (g *goadminRoleUsers) WithContext(ctx context.Context) *goadminRoleUsersDo {
	return g.goadminRoleUsersDo.WithContext(ctx)
}

func (g goadminRoleUsers) TableName() string { return g.goadminRoleUsersDo.TableName() }

func (g *goadminRoleUsers) GetFieldByName(fieldName string) (field.Expr, bool) {
	field, ok := g.fieldMap[fieldName]
	return field, ok
}

func (g *goadminRoleUsers) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["role_id"] = g.RoleID
	g.fieldMap["user_id"] = g.UserID
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
}

func (g goadminRoleUsers) clone(db *gorm.DB) goadminRoleUsers {
	g.goadminRoleUsersDo.ReplaceDB(db)
	return g
}

type goadminRoleUsersDo struct{ gen.DO }

func (g goadminRoleUsersDo) Debug() *goadminRoleUsersDo {
	return g.withDO(g.DO.Debug())
}

func (g goadminRoleUsersDo) WithContext(ctx context.Context) *goadminRoleUsersDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g goadminRoleUsersDo) Clauses(conds ...clause.Expression) *goadminRoleUsersDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g goadminRoleUsersDo) Not(conds ...gen.Condition) *goadminRoleUsersDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g goadminRoleUsersDo) Or(conds ...gen.Condition) *goadminRoleUsersDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g goadminRoleUsersDo) Select(conds ...field.Expr) *goadminRoleUsersDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g goadminRoleUsersDo) Where(conds ...gen.Condition) *goadminRoleUsersDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g goadminRoleUsersDo) Order(conds ...field.Expr) *goadminRoleUsersDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g goadminRoleUsersDo) Distinct(cols ...field.Expr) *goadminRoleUsersDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g goadminRoleUsersDo) Omit(cols ...field.Expr) *goadminRoleUsersDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g goadminRoleUsersDo) Join(table schema.Tabler, on ...field.Expr) *goadminRoleUsersDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g goadminRoleUsersDo) LeftJoin(table schema.Tabler, on ...field.Expr) *goadminRoleUsersDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g goadminRoleUsersDo) RightJoin(table schema.Tabler, on ...field.Expr) *goadminRoleUsersDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g goadminRoleUsersDo) Group(cols ...field.Expr) *goadminRoleUsersDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g goadminRoleUsersDo) Having(conds ...gen.Condition) *goadminRoleUsersDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g goadminRoleUsersDo) Limit(limit int) *goadminRoleUsersDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g goadminRoleUsersDo) Offset(offset int) *goadminRoleUsersDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g goadminRoleUsersDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *goadminRoleUsersDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g goadminRoleUsersDo) Unscoped() *goadminRoleUsersDo {
	return g.withDO(g.DO.Unscoped())
}

func (g goadminRoleUsersDo) Create(values ...*gen_model.GoadminRoleUsers) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g goadminRoleUsersDo) CreateInBatches(values []*gen_model.GoadminRoleUsers, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g goadminRoleUsersDo) Save(values ...*gen_model.GoadminRoleUsers) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g goadminRoleUsersDo) First() (*gen_model.GoadminRoleUsers, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.GoadminRoleUsers), nil
	}
}

func (g goadminRoleUsersDo) Take() (*gen_model.GoadminRoleUsers, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.GoadminRoleUsers), nil
	}
}

func (g goadminRoleUsersDo) Last() (*gen_model.GoadminRoleUsers, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.GoadminRoleUsers), nil
	}
}

func (g goadminRoleUsersDo) Find() ([]*gen_model.GoadminRoleUsers, error) {
	result, err := g.DO.Find()
	return result.([]*gen_model.GoadminRoleUsers), err
}

func (g goadminRoleUsersDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.GoadminRoleUsers, err error) {
	buf := make([]*gen_model.GoadminRoleUsers, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g goadminRoleUsersDo) FindInBatches(result *[]*gen_model.GoadminRoleUsers, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g goadminRoleUsersDo) Attrs(attrs ...field.AssignExpr) *goadminRoleUsersDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g goadminRoleUsersDo) Assign(attrs ...field.AssignExpr) *goadminRoleUsersDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g goadminRoleUsersDo) Joins(field field.RelationField) *goadminRoleUsersDo {
	return g.withDO(g.DO.Joins(field))
}

func (g goadminRoleUsersDo) Preload(field field.RelationField) *goadminRoleUsersDo {
	return g.withDO(g.DO.Preload(field))
}

func (g goadminRoleUsersDo) FirstOrInit() (*gen_model.GoadminRoleUsers, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.GoadminRoleUsers), nil
	}
}

func (g goadminRoleUsersDo) FirstOrCreate() (*gen_model.GoadminRoleUsers, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.GoadminRoleUsers), nil
	}
}

func (g goadminRoleUsersDo) FindByPage(offset int, limit int) (result []*gen_model.GoadminRoleUsers, count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	result, err = g.Offset(offset).Limit(limit).Find()
	return
}

func (g goadminRoleUsersDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g *goadminRoleUsersDo) withDO(do gen.Dao) *goadminRoleUsersDo {
	g.DO = *do.(*gen.DO)
	return g
}
