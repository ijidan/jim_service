// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"jim_service/internal/gen_model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newFeedImage(db *gorm.DB) feedImage {
	_feedImage := feedImage{}

	_feedImage.feedImageDo.UseDB(db)
	_feedImage.feedImageDo.UseModel(&gen_model.FeedImage{})

	tableName := _feedImage.feedImageDo.TableName()
	_feedImage.ALL = field.NewField(tableName, "*")
	_feedImage.ID = field.NewUint64(tableName, "id")
	_feedImage.FeedID = field.NewUint64(tableName, "feed_id")
	_feedImage.ImgURL = field.NewString(tableName, "img_url")
	_feedImage.CreatedAt = field.NewTime(tableName, "created_at")
	_feedImage.UpdatedAt = field.NewTime(tableName, "updated_at")
	_feedImage.DeletedAt = field.NewField(tableName, "deleted_at")

	_feedImage.fillFieldMap()

	return _feedImage
}

type feedImage struct {
	feedImageDo feedImageDo

	ALL       field.Field
	ID        field.Uint64
	FeedID    field.Uint64
	ImgURL    field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field

	fieldMap map[string]field.Expr
}

func (f feedImage) As(alias string) *feedImage {
	f.feedImageDo.DO = *(f.feedImageDo.As(alias).(*gen.DO))

	f.ALL = field.NewField(alias, "*")
	f.ID = field.NewUint64(alias, "id")
	f.FeedID = field.NewUint64(alias, "feed_id")
	f.ImgURL = field.NewString(alias, "img_url")
	f.CreatedAt = field.NewTime(alias, "created_at")
	f.UpdatedAt = field.NewTime(alias, "updated_at")
	f.DeletedAt = field.NewField(alias, "deleted_at")

	f.fillFieldMap()

	return &f
}

func (f *feedImage) WithContext(ctx context.Context) *feedImageDo {
	return f.feedImageDo.WithContext(ctx)
}

func (f feedImage) TableName() string { return f.feedImageDo.TableName() }

func (f *feedImage) GetFieldByName(fieldName string) (field.Expr, bool) {
	field, ok := f.fieldMap[fieldName]
	return field, ok
}

func (f *feedImage) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["feed_id"] = f.FeedID
	f.fieldMap["img_url"] = f.ImgURL
	f.fieldMap["created_at"] = f.CreatedAt
	f.fieldMap["updated_at"] = f.UpdatedAt
	f.fieldMap["deleted_at"] = f.DeletedAt
}

func (f feedImage) clone(db *gorm.DB) feedImage {
	f.feedImageDo.ReplaceDB(db)
	return f
}

type feedImageDo struct{ gen.DO }

func (f feedImageDo) Debug() *feedImageDo {
	return f.withDO(f.DO.Debug())
}

func (f feedImageDo) WithContext(ctx context.Context) *feedImageDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f feedImageDo) Clauses(conds ...clause.Expression) *feedImageDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f feedImageDo) Not(conds ...gen.Condition) *feedImageDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f feedImageDo) Or(conds ...gen.Condition) *feedImageDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f feedImageDo) Select(conds ...field.Expr) *feedImageDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f feedImageDo) Where(conds ...gen.Condition) *feedImageDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f feedImageDo) Order(conds ...field.Expr) *feedImageDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f feedImageDo) Distinct(cols ...field.Expr) *feedImageDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f feedImageDo) Omit(cols ...field.Expr) *feedImageDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f feedImageDo) Join(table schema.Tabler, on ...field.Expr) *feedImageDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f feedImageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *feedImageDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f feedImageDo) RightJoin(table schema.Tabler, on ...field.Expr) *feedImageDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f feedImageDo) Group(cols ...field.Expr) *feedImageDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f feedImageDo) Having(conds ...gen.Condition) *feedImageDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f feedImageDo) Limit(limit int) *feedImageDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f feedImageDo) Offset(offset int) *feedImageDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f feedImageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *feedImageDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f feedImageDo) Unscoped() *feedImageDo {
	return f.withDO(f.DO.Unscoped())
}

func (f feedImageDo) Create(values ...*gen_model.FeedImage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f feedImageDo) CreateInBatches(values []*gen_model.FeedImage, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f feedImageDo) Save(values ...*gen_model.FeedImage) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f feedImageDo) First() (*gen_model.FeedImage, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FeedImage), nil
	}
}

func (f feedImageDo) Take() (*gen_model.FeedImage, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FeedImage), nil
	}
}

func (f feedImageDo) Last() (*gen_model.FeedImage, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FeedImage), nil
	}
}

func (f feedImageDo) Find() ([]*gen_model.FeedImage, error) {
	result, err := f.DO.Find()
	return result.([]*gen_model.FeedImage), err
}

func (f feedImageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.FeedImage, err error) {
	buf := make([]*gen_model.FeedImage, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f feedImageDo) FindInBatches(result *[]*gen_model.FeedImage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f feedImageDo) Attrs(attrs ...field.AssignExpr) *feedImageDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f feedImageDo) Assign(attrs ...field.AssignExpr) *feedImageDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f feedImageDo) Joins(field field.RelationField) *feedImageDo {
	return f.withDO(f.DO.Joins(field))
}

func (f feedImageDo) Preload(field field.RelationField) *feedImageDo {
	return f.withDO(f.DO.Preload(field))
}

func (f feedImageDo) FirstOrInit() (*gen_model.FeedImage, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FeedImage), nil
	}
}

func (f feedImageDo) FirstOrCreate() (*gen_model.FeedImage, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.FeedImage), nil
	}
}

func (f feedImageDo) FindByPage(offset int, limit int) (result []*gen_model.FeedImage, count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	result, err = f.Offset(offset).Limit(limit).Find()
	return
}

func (f feedImageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f *feedImageDo) withDO(do gen.Dao) *feedImageDo {
	f.DO = *do.(*gen.DO)
	return f
}
