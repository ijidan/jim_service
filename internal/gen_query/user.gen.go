// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen_query

import (
	"context"
	"jim_service/internal/gen_model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"
)

func newUser(db *gorm.DB) user {
	_user := user{}

	_user.userDo.UseDB(db)
	_user.userDo.UseModel(&gen_model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewField(tableName, "*")
	_user.ID = field.NewUint64(tableName, "id")
	_user.Nickname = field.NewString(tableName, "nickname")
	_user.Password = field.NewString(tableName, "password")
	_user.Gender = field.NewString(tableName, "gender")
	_user.AvatarURL = field.NewString(tableName, "avatar_url")
	_user.Extra = field.NewString(tableName, "extra")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.DeletedAt = field.NewField(tableName, "deleted_at")
	_user.Device = userHasManyDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Device", "gen_model.Device"),
	}

	_user.Message = userHasManyMessage{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Message", "gen_model.Device"),
	}

	_user.GroupUser = userManyToManyGroupUser{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("GroupUser", "gen_model.GroupUser"),
	}

	_user.Feed = userHasManyFeed{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Feed", "gen_model.Feed"),
		FeedImage: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Feed.FeedImage", "gen_model.FeedImage"),
		},
		FeedVideo: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Feed.FeedVideo", "gen_model.FeedVideo"),
		},
		FeedLike: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Feed.FeedLike", "gen_model.FeedLike"),
		},
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo userDo

	ALL       field.Field
	ID        field.Uint64
	Nickname  field.String
	Password  field.String
	Gender    field.String
	AvatarURL field.String
	Extra     field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	Device    userHasManyDevice

	Message userHasManyMessage

	GroupUser userManyToManyGroupUser

	Feed userHasManyFeed

	fieldMap map[string]field.Expr
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))

	u.ALL = field.NewField(alias, "*")
	u.ID = field.NewUint64(alias, "id")
	u.Nickname = field.NewString(alias, "nickname")
	u.Password = field.NewString(alias, "password")
	u.Gender = field.NewString(alias, "gender")
	u.AvatarURL = field.NewString(alias, "avatar_url")
	u.Extra = field.NewString(alias, "extra")
	u.CreatedAt = field.NewTime(alias, "created_at")
	u.UpdatedAt = field.NewTime(alias, "updated_at")
	u.DeletedAt = field.NewField(alias, "deleted_at")

	u.fillFieldMap()

	return &u
}

func (u *user) WithContext(ctx context.Context) *userDo { return u.userDo.WithContext(ctx) }

func (u user) TableName() string { return u.userDo.TableName() }

func (u *user) GetFieldByName(fieldName string) (field.Expr, bool) {
	field, ok := u.fieldMap[fieldName]
	return field, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 13)
	u.fieldMap["id"] = u.ID
	u.fieldMap["nickname"] = u.Nickname
	u.fieldMap["password"] = u.Password
	u.fieldMap["gender"] = u.Gender
	u.fieldMap["avatar_url"] = u.AvatarURL
	u.fieldMap["extra"] = u.Extra
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userHasManyDevice struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyDevice) Where(conds ...field.Expr) *userHasManyDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyDevice) WithContext(ctx context.Context) *userHasManyDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyDevice) Model(m *gen_model.User) *userHasManyDeviceTx {
	return &userHasManyDeviceTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyDeviceTx struct{ tx *gorm.Association }

func (a userHasManyDeviceTx) Find() (result []*gen_model.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyDeviceTx) Append(values ...*gen_model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyDeviceTx) Replace(values ...*gen_model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyDeviceTx) Delete(values ...*gen_model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyDeviceTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyMessage struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyMessage) Where(conds ...field.Expr) *userHasManyMessage {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyMessage) WithContext(ctx context.Context) *userHasManyMessage {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyMessage) Model(m *gen_model.User) *userHasManyMessageTx {
	return &userHasManyMessageTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyMessageTx struct{ tx *gorm.Association }

func (a userHasManyMessageTx) Find() (result []*gen_model.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyMessageTx) Append(values ...*gen_model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyMessageTx) Replace(values ...*gen_model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyMessageTx) Delete(values ...*gen_model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyMessageTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyMessageTx) Count() int64 {
	return a.tx.Count()
}

type userManyToManyGroupUser struct {
	db *gorm.DB

	field.RelationField
}

func (a userManyToManyGroupUser) Where(conds ...field.Expr) *userManyToManyGroupUser {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userManyToManyGroupUser) WithContext(ctx context.Context) *userManyToManyGroupUser {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userManyToManyGroupUser) Model(m *gen_model.User) *userManyToManyGroupUserTx {
	return &userManyToManyGroupUserTx{a.db.Model(m).Association(a.Name())}
}

type userManyToManyGroupUserTx struct{ tx *gorm.Association }

func (a userManyToManyGroupUserTx) Find() (result *gen_model.GroupUser, err error) {
	return result, a.tx.Find(&result)
}

func (a userManyToManyGroupUserTx) Append(values ...*gen_model.GroupUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userManyToManyGroupUserTx) Replace(values ...*gen_model.GroupUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userManyToManyGroupUserTx) Delete(values ...*gen_model.GroupUser) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userManyToManyGroupUserTx) Clear() error {
	return a.tx.Clear()
}

func (a userManyToManyGroupUserTx) Count() int64 {
	return a.tx.Count()
}

type userHasManyFeed struct {
	db *gorm.DB

	field.RelationField

	FeedImage struct {
		field.RelationField
	}
	FeedVideo struct {
		field.RelationField
	}
	FeedLike struct {
		field.RelationField
	}
}

func (a userHasManyFeed) Where(conds ...field.Expr) *userHasManyFeed {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyFeed) WithContext(ctx context.Context) *userHasManyFeed {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyFeed) Model(m *gen_model.User) *userHasManyFeedTx {
	return &userHasManyFeedTx{a.db.Model(m).Association(a.Name())}
}

type userHasManyFeedTx struct{ tx *gorm.Association }

func (a userHasManyFeedTx) Find() (result []*gen_model.Feed, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyFeedTx) Append(values ...*gen_model.Feed) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyFeedTx) Replace(values ...*gen_model.Feed) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyFeedTx) Delete(values ...*gen_model.Feed) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyFeedTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyFeedTx) Count() int64 {
	return a.tx.Count()
}

type userDo struct{ gen.DO }

func (u userDo) Debug() *userDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) *userDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) Clauses(conds ...clause.Expression) *userDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Not(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) *userDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) *userDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) *userDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) *userDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() *userDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*gen_model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*gen_model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*gen_model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*gen_model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.User), nil
	}
}

func (u userDo) Take() (*gen_model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.User), nil
	}
}

func (u userDo) Last() (*gen_model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.User), nil
	}
}

func (u userDo) Find() ([]*gen_model.User, error) {
	result, err := u.DO.Find()
	return result.([]*gen_model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*gen_model.User, err error) {
	buf := make([]*gen_model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*gen_model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) *userDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) *userDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(field field.RelationField) *userDo {
	return u.withDO(u.DO.Joins(field))
}

func (u userDo) Preload(field field.RelationField) *userDo {
	return u.withDO(u.DO.Preload(field))
}

func (u userDo) FirstOrInit() (*gen_model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*gen_model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*gen_model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*gen_model.User, count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	result, err = u.Offset(offset).Limit(limit).Find()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
